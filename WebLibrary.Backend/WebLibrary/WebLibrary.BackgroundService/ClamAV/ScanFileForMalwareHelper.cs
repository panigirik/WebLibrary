using System.Net.Sockets;
using FluentValidation;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Configuration;
using nClam;

namespace WebLibrary.BackgroundService.ClamAV;

    /// <summary>
    /// Класс для сканирования файлов на наличие вредоносного ПО с использованием ClamAV.
    /// </summary>
    public class ScanFileForMalwareHelper
    {
        private readonly string _clamAvHost;
        private readonly int _clamAvPort;
        private readonly string _clamAvEnabled;

        /// <summary>
        /// Конструктор для инициализации класса с параметрами конфигурации.
        /// </summary>
        /// <param name="configuration">Конфигурация приложения.</param>
        public ScanFileForMalwareHelper(IConfiguration configuration)
        {
            _clamAvHost = configuration["ClamAvConnection:Host"] ?? 
                          throw new InvalidOperationException("ClamAV Host not found in configuration.");
            _clamAvPort = int.Parse(configuration["ClamAvConnection:Port"] ?? 
                                    throw new InvalidOperationException("ClamAV Port is missing or invalid."));
            _clamAvEnabled = configuration["ClamAvConnection:IsEnabled"];
        }

        /// <summary>
        /// Задача для проверки файла на наличие вредоносного ПО.
        /// </summary>
        /// <param name="file">Файл, который необходимо проверить.</param>
        /// <exception cref="ValidationException">Бросается, если в файле обнаружено вредоносное ПО.</exception>
        public async Task ScanFileAsync(IFormFile file)
        {
            if (_clamAvEnabled == "true")
            {
                TestConnectionAsync();
                try
                {
                    var clamClient = new ClamClient(_clamAvHost, _clamAvPort);
                    using var stream = file.OpenReadStream();
                    var scanResult = await clamClient.SendAndScanFileAsync(stream);
                    if (scanResult.Result == ClamScanResults.VirusDetected)
                    {
                        throw new ValidationException($"Malware detected {scanResult.InfectedFiles}");
                    }
                }
                catch (SocketException)
                {
                    throw new InvalidOperationException("ClamAV not responding");
                }
            }
        }

        /// <summary>
        /// Тестирование соединения с сервером ClamAV.
        /// </summary>
        public void TestConnectionAsync()
        {
            try
            {
                var clamClient = new ClamClient(_clamAvHost, _clamAvPort);
                if (!clamClient.PingAsync().GetAwaiter().GetResult())
                {
                    Console.WriteLine("ClamAV not responding");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error connecting to ClamAV: {ex.Message}");
            }
        }
    }
